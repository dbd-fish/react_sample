name: eslint, prettier

on:
  pull_request:
  # プルリクエストにプッシュするたびに実行したい場合はtypesをコメントにする
    # types: 
    #   - closed
    # プルリクエストがマージされるときにこのワークフローをトリガーします。
  workflow_dispatch:
    # 手動でこのワークフローをトリガーします。


jobs:
  eslint_and_prettier:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    # ジョブをUbuntu最新環境で実行します。

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # リポジトリのコードをチェックアウトします。
        # 後続のステップでコードベースにアクセスするための準備です。

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # 最新のDocker環境とBuildxをセットアップします。
        # Docker Compose v2も含まれます。

      - name: Install Docker Compose v2
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
          sudo ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose
        # Docker Compose v2をインストールし、必要に応じてエイリアスを設定します。
        # `docker compose`コマンドを従来の`docker-compose`と互換性を持たせるためにリンクを作成。

      - name: Set up frontend Container
        run: |
          docker compose up -d frontend
        # docker-compose.ymlを使用して、frontendコンテナのみ立ち上げる
        # Docker Compose v2では`docker compose`コマンドが推奨されます。

      - name: Check frontend Container
        run: |
          docker ps
        # 起動中のDockerコンテナを一覧表示します。
        # frontendコンテナが正しく起動しているかを確認

      - name: Run eslint in frontend Container
        run: |
          docker exec sample_frontend_container npm run lint
        # frontendコンテナ内でESLintを実行

      - name: Run prettier in frontend Container
        run: |
          docker exec sample_frontend_container npm run format
        # frontendコンテナ内でPrettierを実行
